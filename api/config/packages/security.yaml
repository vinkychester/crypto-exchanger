security:
    encoders:
        legacy_bcrypt:
            algorithm: bcrypt
        Symfony\Component\Security\Core\User\User:
            algorithm: sodium
            migrate_from:
                # allow existing bcrypt accounts to log in
                # and migrate to sodium
                - legacy_bcrypt
                - bcrypt
        App\Entity\User:
            algorithm: sodium
            migrate_from:
                    # allow existing bcrypt accounts to log in
                    # and migrate to sodium
                - legacy_bcrypt
                - bcrypt
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: false
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        app_user_provider:
            entity:
                class: 'App\Entity\User'
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        google_two_auth_secured_area:
            pattern: ^/api/google_two_factor_check
            lazy: true
            guard:
                authenticators:
                    - App\Security\GoogleTwoFactorsAuthenticator
        google:
            pattern: ^/api/google_check
            lazy: true
            guard:
                authenticators:
                    - App\Security\GoogleAuthenticator
        main:
            pattern: ^/api/login_check
            lazy: true
            user_checker: App\Security\UserChecker
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            lazy: true
            stateless: true
            anonymous: true
            provider: app_user_provider
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/google_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/google_two_factor_confirm, roles: ROLE_CLIENT }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
